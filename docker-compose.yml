services:
  backend:
    container_name: nocturne-backend
    build:
      context: ./backend
      args:
        DATABASE_PROVIDER: ${DATABASE_PROVIDER}
        DATABASE_URL: ${DATABASE_URL}
        GLOBAL_USERNAME: ${GLOBAL_USERNAME}
        GLOBAL_PASSWORD: ${GLOBAL_PASSWORD}
        FRONTEND_URL: ${FRONTEND_URL}
        SESSION_SECRET: ${SESSION_SECRET}
        API_HOST: ${API_HOST}
        API_PORT: ${API_PORT}
        MEILISEARCH_HOST: http://meilisearch:7700  # Ajouter l'URL de Meilisearch en build arg si besoin
    environment:
      DATABASE_PROVIDER: ${DATABASE_PROVIDER}
      DATABASE_URL: ${DATABASE_URL}
      GLOBAL_USERNAME: ${GLOBAL_USERNAME}
      GLOBAL_PASSWORD: ${GLOBAL_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL}
      SESSION_SECRET: ${SESSION_SECRET}
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
      MEILISEARCH_HOST: http://meilisearch:7700  # Ajout dans l'environnement
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - meilisearch

  frontend:
    container_name: nocturne-frontend
    build:
      context: ./frontend
      args:
        API_URL: ${API_URL}
        MEILISEARCH_HOST: ${MEILISEARCH_HOST}
    environment:
      API_URL: ${API_URL}
      MEILISEARCH_HOST: ${MEILISEARCH_HOST}
    ports:
      - "4200:8100"
    depends_on:
      - backend
      - meilisearch

  db:
    image: postgres:14
    container_name: nocturne-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data

  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: nocturne-meilisearch
    ports:
      - "7700:7700"
    environment:
      MEILI_ENV: production
      MEILI_MASTER_KEY: ${MEILISEARCH_MASTER_KEY}
    volumes:
      - meili_data:/meili_data

volumes:
  db_data:
  meili_data:
